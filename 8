Лабораторная работа №10
Поиск расстояний во взвешенном графе


Общие сведения.
 
Во взвешенном графе в отличие от не взвешенного каждое ребро имеет вес, отличный от нуля. Поэтому в матрице смежности взвешенного графа содержится информация не только о наличии ребра, но и о его весе. 

Рисунок 1 – Граф

Поиск расстояний между вершинами в таком графе также возможно построить используя процедуры обхода графа. Отличие от поиска расстояний в не взвешенном графе будет состоять в том, что при обновлении расстояния до вершины при ее посещении оно будет увеличиваться не на 1, а на величину веса ребра. 
Таким образом, можно предложить следующую реализацию алгоритма обхода в ширину.

Вход: G – матрица смежности графа, v – исходная вершина.
Выход: DIST – вектор расстояний до всех вершин от исходной.
Алгоритм ПОШ 
1.1. для всех i положим DIST [i] =  -1 пометим как "не посещенную"; 
1.2. ВЫПОЛНЯТЬ BFSD (v).
1.3  для всех i вывести DIST [i] на экран;


Алгоритм BFSD(v):
2.1. Создать пустую очередь Q = {};
2.2. Поместить v в очередь Q.push(v);
2.3. Обновить вектор расстояний  DIST [ x ] = 0;
2.4. ПОКА  Q != ( очередь не пуста ВЫПОЛНЯТЬ
2.5.	v = Q.front() установить текущую вершину;
2.6. 	Удалить первый элемент из очереди Q.pop();
2.7. 	вывести на экран v;
2.8. 	ДЛЯ i = 1 ДО size_G ВЫПОЛНЯТЬ 
2.9. 	   ЕСЛИ  G(v,i) > 0 И DIST = = -1
2.10. 	        ТО 
2.11. 		 Поместить i в очередь Q.push(i);
2.12. 		 Обновить вектор расстояний DIST [ i ] = DIST [ v ] + G(v,i);

Реализация состоит из подготовительной части, в которой все вершины помечаются как не поcещенные (п.1.1). Не посещенные вершины помечаются – 1, т.к. значение 0 и 1 могут быть расстояниями. Расстояние 0 – от исходной вершины до самой себя. 
В самой процедуре сначала создается пустая очередь (п. 2.1), в которую помещается исходная вершина, из которой начат обход (п.2.2). Расстояние до этой вершины (п.2.3) устанавливается равным 0 (расстояние до самой себя).
Далее итерационно, пока очередь не опустеет, из нее извлекается первый элемент, который становится текущей вершиной (п. 2.5, 2.6). Затем в цикле просматривается v-я строка матрицы смежности графа G(v,i). Как только алгоритм встречает смежную с v не посещенную вершину (п.2.9), эта вершина помещается в очередь (п.2.11) и для нее обновляется вектор расстояния (п.2.12). Расстояние до новой i-й вершины вычисляется как расстояние до текущей v-й вершины плюс вес ребра до новой вершины G(v,i).
После просмотра строки матрицы смежности алгоритм делает следующую итерацию цикла 2.4 или заканчивает работу, если очередь пуста.
Если для всех пар вершин графа определены расстояния, то можно вычислить эксцентриситет
Если G - граф, содержащий непустое множество n вершин V и множество ребер E и d(vi, vj) – расстояние между двумя произвольными вершинами vi и vj, тогда для фиксированной вершины v величина
,
где v, vj (V и j = 1…n называется эксцентриситетом вершины vi.
Другими словами эксцентриситет вершины – расстояние до наиболее удаленной вершины графа.
Максимальный эксцентриситет среди эксцентриситетов всех вершин графа называется диаметром графа G и обозначается через D(G). 
Вершина vi называется периферийной, если её эксцентриситет равен диаметру графа e(vi) = d(G). 
Минимальный из эксцентриситетов вершин графа называется его радиусом и обозначается через r(G). 
Вершина vi называется центральной, если её эксцентриситет равен радиусу графа e(vi) = r(G). 
Множество всех центральных вершин графа называется его центром. Граф G может иметь единственную центральную вершину или несколько центральных вершин.
.
Задание 1
Сгенерируйте (используя генератор случайных чисел) матрицу смежности для неориентированного взвешенного графа G. Выведите матрицу на экран.
 Для сгенерированного графа осуществите процедуру поиска расстояний, реализованную в соответствии с приведенным выше описанием. При  реализации алгоритма в качестве очереди используйте класс queue из стандартной библиотеки С++.
